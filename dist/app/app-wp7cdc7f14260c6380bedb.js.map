{"version":3,"file":"app/app-wp7cdc7f14260c6380bedb.js","mappings":"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","sources":["webpack://_new/webpack/bootstrap","webpack://_new/./src/app/js/physicianPopupCard.js","webpack://_new/./src/app/utilities/create-physician.js","webpack://_new/./src/app/utilities/SearchExperts.js","webpack://_new/./src/app/js/app.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","function physicianPopupCard(expert) {\n\n  \n\n\n\n\n  let popup_container = document.createElement('div');\n  popup_container.classList.add('physician-popup-container');\n  popup_container.id = 'physician-popup-container';\n\n\n  // variables; \n  let title = expert.name;\n  let job_title = expert.title;\n    let image_url = expert.thumbnail;\n    console.log(expert.specialty);\n  let specialty = expert.specialty.reduce((acc, curr) => {\n    const specialties = {\n        sportsmedicine: 'Sports Medicine',\n        spineneckback: 'Spine (Neck & Back)',\n        handwrist: 'Hand & Wrist',\n        footankle: 'Foot & Ankle',\n        jointreplacement: 'Joint Replacement',\n        pediatric: 'Pediatric',\n        shoulder: 'Shoulder',\n        hipknee: 'Hip & Knee',\n        trauma: 'Trauma',\n        oncology: 'Oncology',\n        generalorthopaedics: 'General Orthopaedics',\n        jointreplacementankle: 'Joint Replacement – Ankle',\n        jointreplacementknee: 'Joint Replacement – Knee',\n        jointreplacementhip: 'Joint Replacement – Hip'\n    };\n  let specialty = specialties[curr];    \n     \n    curr = curr.charAt(0).toUpperCase() + curr.slice(1);\n    let html = `<div class=\"specialty-text\"> ${specialty} </div>`;\n    return acc + html;\n  }, '');\n  let locations = expert.location.split('<br />').reduce((acc, curr) => {\n    // remove <p> and </p> tags from html\n    curr = curr.replace(/<\\/?p>/g, '');\n    // upper case first letter\n    curr = curr.charAt(0).toUpperCase() + curr.slice(1);\n\n    let html = `<div class=\"location-text\"> ${curr} </div>`;\n    return acc + html;\n  },\n      '');\n    let affilation_image = expert.affilation_image;\n\n\n\n\n\n  popup_container.innerHTML = `<div class=\"physician-popup\">\n      <div class=\"physician-popup-inner\">\n          <img class=\"profile-pic\"src=\"${image_url}\" />\n          <div class=\"content\">\n              <div class=\"info\">\n                  <div class=\"name\"> ${title}</div>\n                  <div class=\"job-title\"> ${job_title} </div>\n              </div>\n              <img class=\"logo\" src=\"${affilation_image}\" />\n              <div class=\"location-and-specialty\">\n                  <div class=\"locations\">\n                      <svg class=\"location-svg\" width=\"32\" height=\"31\" viewBox=\"0 0 32 31\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <g clip-path=\"url(#clip0_105_662)\">\n                              <path d=\"M18.0966 14.8542C19.9049 14.8542 21.3257 13.4333 21.3257 11.625C21.3257 9.81666 19.9049 8.39583 18.0966 8.39583C16.2882 8.39583 14.8674 9.81666 14.8674 11.625C14.8674 13.4333 16.2882 14.8542 18.0966 14.8542ZM18.0966 2.58333C23.1341 2.58333 27.1382 6.5875 27.1382 11.625C27.1382 18.3417 18.0966 28.4167 18.0966 28.4167C18.0966 28.4167 9.05491 18.3417 9.05491 11.625C9.05491 6.5875 13.0591 2.58333 18.0966 2.58333ZM6.47158 11.625C6.47158 17.4375 13.0591 25.4458 14.2216 26.8667L12.9299 28.4167C12.9299 28.4167 3.88824 18.3417 3.88824 11.625C3.88824 7.49166 6.60074 4.13333 10.3466 2.97083C8.02158 5.0375 6.47158 8.1375 6.47158 11.625Z\" fill=\"white\" />\n                          </g>\n                          <defs>\n                              <clipPath id=\"clip0_105_662\">\n                                  <rect width=\"31\" height=\"31\" fill=\"white\" transform=\"translate(0.0132446)\" />\n                              </clipPath>\n                          </defs>\n                      </svg>\n                      <div class=\"location-inner\">\n                         ${locations}\n                      </div>\n                  </div>\n                  <div class=\"specialty\">\n                      <svg class=\"specialty-svg\" width=\"31\" height=\"31\" viewBox=\"0 0 31 31\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path d=\"M23.2566 3.875H7.75663C7.04326 3.875 6.46497 4.4533 6.46497 5.16667V25.8333C6.46497 26.5467 7.04326 27.125 7.75663 27.125H23.2566C23.97 27.125 24.5483 26.5467 24.5483 25.8333V5.16667C24.5483 4.4533 23.97 3.875 23.2566 3.875Z\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n                          <path d=\"M15.5066 20.6667V15.5M18.09 18.0833H12.9233M11.6316 7.75C11.6316 8.09257 11.7677 8.42111 12.0099 8.66335C12.2522 8.90558 12.5807 9.04167 12.9233 9.04167H18.09C18.4325 9.04167 18.7611 8.90558 19.0033 8.66335C19.2455 8.42111 19.3816 8.09257 19.3816 7.75V3.875H11.6316V7.75Z\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\n                      </svg>\n                      <div class=\"specialty-inner\">\n                      ${specialty}\n                      </div>\n                  </div>\n              </div>\n              <div class=\"learn-more\">\n                    <a href=\"${expert.permalink}\">Learn More</a>\n              </div>\n          </div>\n      </div>\n      <div id='physician-close-modal' class=\"physician-close-modal\">\n          <div class=\"physician-close-modal-text\"> x </div>\n      </div>\n  </div>\n  `;\n\n\n\n  document.body.appendChild(popup_container);\n  //  get modal and delete modal once clicked \n  let close_modal = document.getElementById('physician-close-modal');\n  close_modal.onclick = () => {\n    popup_container.remove();\n    // unlock body\n    document.body.style.overflow = 'auto';\n    // height of body auto\n    document.body.style.height = 'auto';\n  };\n\n\n\n\n\n}\n\nexport { physicianPopupCard };","import { physicianPopupCard } from \"../js/physicianPopupCard\";\n\n \n\nexport const createPhysician = (data) => {\n    let physicianCard = document.createElement('div');\n    // href data.permalink\n    // physicianCard.href = data.permalink;\n\n\n    /**\n     *    use later\n     *    <div data-value=\"${data.id}\" class=\"user physician-menu-item\"><img decoding=\"async\" class=\"user-icon\" src=\"${site_url}/wp-content/uploads/2024/04/User.png\"></div>\n     */\n    physicianCard.classList.add('physician-card');\n    \n    physicianCard.dataset.physican_data = JSON.stringify(data);\n\n\n    physicianCard.innerHTML = `\n    <p><img decoding=\"async\" class=\"physician-card-thumbnail\" src=\"${data.thumbnail}\"></p>\n\n    <div class=\"physician-card-content\">\n        <div class=\"name\">${data.name}</div>\n        <div class=\"title\">${data.title}</div>\n        <div class=\"location-container\">\n            <div class\n            =\"location\">${data.affiliation_choice}</div>\n        </div>\n    </div>\n\n    <div class=\"physician-menu\">\n     \n        <div data-value=\"${data.phone}\" class=\"telephone physician-menu-item\"><img decoding=\"async\" class=\"phone-icon\" src=\"${site_url}/wp-content/uploads/2024/04/specialty-2024.png\"></div>\n        <div data-value=\"${data.location}\" class=\"location2 physician-menu-item\"><img decoding=\"async\" class=\"map-icon\" src=\"${site_url}/wp-content/uploads/2024/04/Map.png\"></div>\n    </div>\n    `;\n\n    // get physician-card-thumbnail and attach onclick listener \n    let thumbnail = physicianCard.querySelector('.physician-card-thumbnail');\n    thumbnail.addEventListener('click', () => {\n        window\n            .location\n            .href = data.permalink;\n    }\n    );\n    // get each physician-menu-item and attach onclick listener \n    let physicianMenuItems = physicianCard.querySelectorAll('.physician-menu-item');\n    physicianMenuItems.forEach(menuItem => {\n        menuItem.addEventListener('click', (e) => {\n            let value = e.currentTarget.dataset.value;\n            if (e.currentTarget.classList.contains('user')) {\n                // use permalink to go to the physician page\n                window.location.href = data.permalink;\n            } else if (e.currentTarget.classList.contains('telephone')) {\n                physicianPopupCard(data);\n                 \n            } else if (e.currentTarget.classList.contains('location2')) {\n                physicianPopupCard(data);\n            }\n        });\n    });\n    return physicianCard;\n}\n\n\nexport const fetchPhysicians = async () => {\n    try {\n            // add wp_rest_nonce to header \n    let headers = new Headers();\n    headers.append('X-WP-Nonce', wp_rest_nonce);\n        // use ajax-url with ortho/v1/get_experts endpoint\n        let response = await fetch(ajax_url + 'ortho/v1/get_experts', {\n            method: 'GET',\n            headers: headers\n        });\n        let data = await response.json();\n\n\n        console.log(data, 'data');\n          if (!data?.success) {\n            console.log(data.message, 'no success');\n            throw new Error('Error fetching physicians');\n        }\n       \n \n        // if data has experts property and is an array return the data\n        if (data?.experts && Array.isArray(data.experts)) {\n            const sortedExperts = data.experts.sort((a, b) => {\n                // Split the names into first and last names\n                const [aLastName, aFirstName] = a.name.split(' ').reverse();\n                const [bLastName, bFirstName] = b.name.split(' ').reverse();\n        \n                // Compare last names\n                if (aLastName !== bLastName) {\n                    return aLastName.localeCompare(bLastName);\n                } else {\n                    // If last names are equal, compare first names\n                    return aFirstName.localeCompare(bFirstName);\n                }\n            });\n\n            return sortedExperts;\n             \n            \n        } else {\n            console.log(data.message, 'no experts');\n            throw new Error('Error fetching physicians');\n        }\n     } catch (error) {\n        //  return error message\n        return error.message;\n         \n    }\n}","import { createPhysician, fetchPhysicians } from \"./create-physician\";\n\nclass SearchExperts {\n  constructor(main_grid) {\n    this.main_grid = document.querySelector(main_grid);\n    this.secondary_grid = document.getElementById(\"offering-grid\");\n    this.secondary_text = document.getElementById(\"offering-text\").querySelector('strong');\n    this.sports_medicine_row = document.getElementById(\"sportsmedicine-row\");\n    this.spine_back_row = document.getElementById(\"spineneckback-row\");\n    this.filterSelects = [...document.querySelectorAll(\".expert-filter\")].slice(0, 2);\n    this.filterSearch = document.querySelector(\".expert-filter-search-box\");\n    this.option_values_to_text_ids = {\n      all: false,\n      footankle: \"foot-ankle-x\",\n      generalorthopaedics: \"general-orthopeadics-x\",\n      handwrist: \"hand-wrist-x\",\n      hipknee: \"hip-x\",\n      oncology: \"oncology-x\",\n      pediatric: \"pediatric-x\",\n      shoulder: \"shoulder-x\",\n      spineneckback: \"spine-neck-back-x\",\n      sportsmedicine: \"sports-medicine-x\",\n      trauma: \"trauma-x\",\n    };\n\n    this.activePargraph = null;\n\n    this.filter = {\n      location: 'all',\n      specialty: 'all',\n      name: 'all' // Be sure to change this on every page that uses dataset search\n    };\n\n    this.sports_medicine_row.style.display = \"none\";\n    this.spine_back_row.style.display = \"none\";\n    // display none offering grid \n    this.secondary_grid.style.display = \"none\";\n    // display none offering text\n    this.secondary_text.style.display = \"none\";\n    this.init();\n    this.events();\n  }\n\n  async init() {\n      try {\n        await this.setup_experts();\n     \n        this.getSportsMedicineRow();\n        this.getSpineRow();\n        \n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n    \n   async  setup_experts() {\n        this.main_grid.innerHTML = '';\n        this.experts = await fetchPhysicians();\n     this.filteredExperts = [];\n     \n     console.log(this.experts[0], 'experts');\n  \n        this.experts.forEach(expert => {\n          let expertCard = createPhysician(expert);\n          this.main_grid.appendChild(expertCard);\n        });\n        \n    }\n  getSportsMedicineRow(data) {\n    this.sports_medicine_data = data.reduce((acc, expert) => {\n        let specialty = expert.specialty;\n        let isMedicine = expert.specialty.includes(\"sportsmedicine\");\n        let secondary_specialty = expert.secondary_specialty;\n        let isMedicineSecondary = secondary_specialty .includes(\"sportsmedicine\");\n        let isSurgery = expert.surgery.toLowerCase() === 'yes'; \n        if (isMedicine) {\n            if(isSurgery) {\n                acc.sports_medicine_surgery.push(expert);\n            } else {\n                acc.sports_medicine_non_surgery.push(expert);\n            }\n        }\n\n        if (isMedicineSecondary) {\n            acc.sports_medicine_also_offering.push(expert);\n        }\n\n        return acc;\n    }, {\n        sports_medicine_surgery: [],\n        sports_medicine_non_surgery: [],\n        sports_medicine_also_offering: []\n    }); \n      \n      let sports_medicine_surgeon_row = document.getElementById(\"sports-medicine-surgeon\");\n    \n      let non_surgeon_medicine_row = document.getElementById(\"non-sports-medicine-surgeon\");\n      //   add classlist physicians-grid-figma\n      non_surgeon_medicine_row.classList.add('physicians-grid-figma');\n\n    \n      const { sports_medicine_surgery, sports_medicine_non_surgery, sports_medicine_also_offering } = this.sports_medicine_data;\n      sports_medicine_surgeon_row.innerHTML = '';\n        sports_medicine_surgery.forEach(expert => {\n            let expertCard = createPhysician(expert);\n            sports_medicine_surgeon_row.appendChild(expertCard);\n        });\n      non_surgeon_medicine_row.innerHTML = '';\n        sports_medicine_non_surgery.forEach(expert => {\n            let expertCard = createPhysician(expert);\n            non_surgeon_medicine_row.appendChild(expertCard);\n        });\n    \n      \n}\n\n    getSpineRow(data) { \n        this.spine_back_data = data.reduce((acc, expert) => {\n            let specialty = expert.specialty;\n \n            let isMedicine = specialty.includes(\"spineneckback\");\n            let secondary_specialty = expert.secondary_specialty;\n            let isMedicineSecondary = secondary_specialty .includes(\"spineneckback\");\n            let isSurgery = expert.surgery.toLowerCase() === 'yes'; \n            if (isMedicine) {\n                if(isSurgery) {\n                    acc.spine_back_surgery.push(expert);\n                } else {\n                    acc.spine_back_non_surgery.push(expert);\n                }\n            }\n    \n            if (isMedicineSecondary) {\n                acc.spine_back_also_offering.push(expert);\n            }\n    \n            return acc;\n        }, {\n            spine_back_surgery: [],\n            spine_back_non_surgery: [],\n            spine_back_also_offering: []\n        }); \n          \n          let spine_back_surgeon_row = document.getElementById(\"spine-back-surgeon\");\n        \n          let spine_back_non_surgeon_row = document.getElementById(\"spine-back-non-surgeon\");\n          //   add classlist physicians-grid-figma\n          spine_back_non_surgeon_row.classList.add('physicians-grid-figma');\n    \n        \n          const { spine_back_surgery, spine_back_non_surgery, spine_back_also_offering } = this.spine_back_data;\n          spine_back_surgeon_row.innerHTML = '';\n            spine_back_surgery.forEach(expert => {\n                let expertCard = createPhysician(expert);\n                spine_back_surgeon_row.appendChild(expertCard);\n            });\n          spine_back_non_surgeon_row.innerHTML = '';\n            spine_back_non_surgery.forEach(expert => {\n                let expertCard = createPhysician(expert);\n                spine_back_non_surgeon_row.appendChild(expertCard);\n            });\n    }\n\n  events() {\n    this.filterSelects.forEach(select => {\n      select.addEventListener(\"change\", (e) => {\n        const active_pargraph_selector = () => {\n            if (this.activePargraph) this.activePargraph.style.display = \"none\";\n            this.activePargraph = null;\n          let id = this.option_values_to_text_ids[e.target.value];\n            this.activePargraph = document.getElementById(id);\n            \n            if(this.activePargraph) this.activePargraph.style.display = \"block\";\n        };\n          const correct_row = () => {\n              if (e.target.value === 'sportsmedicine') {\n                  this.sports_medicine_row.style.display = \"block\";\n                  this.spine_back_row.style.display = \"none\";\n                  this.main_grid.style.display = \"none\";\n              } else if (e.target.value === 'spineneckback') {\n                  this.sports_medicine_row.style.display = \"none\";\n                  this.spine_back_row.style.display = \"block\";\n                    this.main_grid.style.display = \"none\";\n              } else {\n                  this.sports_medicine_row.style.display = \"none\";\n                  this.spine_back_row.style.display = \"none\";\n                    this.main_grid.style.display = \"grid\";\n              }\n          };\n          \n          \n        // dataset fliter group \n        let key = e.target.dataset.filterGroup;\n\n        this.filter[key] = e.target.value;\n        if (key === 'specialty') {\n            active_pargraph_selector();\n            \n            correct_row();\n\n        }\n          \n      \n\n        this.filterExperts();\n      });\n    });\n\n    this.filterSearch.addEventListener(\"input\", (e) => {\n      this.filter.name = e.target.value;\n      this.filterExperts();\n    });\n  }\n\n    filterExperts() {\n        this.filteredExperts = []; \n        this.secondFilteredExperts = [];\n        this.experts.forEach(expert => {\n            let specialty = expert.specialty;\n            let secondary_specialty = expert.secondary_specialty;\n            let location = expert.location;\n            let name = expert.name;\n       \n            const isFound = (key) => {\n           \n                let found = false;\n                let filterValue = this.filter[key].trim().toLowerCase();\n\n                let expertValue = expert[key];\n\n\n           \n                if (filterValue === 'all' || filterValue === '' || filterValue === 'all locations') {\n                    found = true;\n                } else {\n                    // if expertValue is an array then do include check\n                    if (Array.isArray(expertValue)) {\n                        found = expertValue.includes(filterValue);\n                    } else {\n                        // do regex check \n                        let regex = new RegExp(filterValue, 'gi');\n                        found = expertValue.match(regex);\n                    }\n                }\n                return found;\n            }\n\n            let locationFound = isFound('location');\n         \n            // if no location skip to next iteration\n            if (!locationFound) return;\n            console.log(locationFound, 'locationFound');\n            let nameFound = isFound('name');\n            // // if no name skip to next iteration\n            if (!nameFound) return;\n           \n      \n        \n            if (this.filter.specialty === 'all') {\n                this.filteredExperts.push(expert);\n            } else if (specialty.includes(this.filter.specialty)) {\n                this.filteredExperts.push(expert);\n            } else if (secondary_specialty.includes(this.filter.specialty)) {\n                this.secondFilteredExperts.push(expert);\n            }\n        });\n        \n\n    this.main_grid.innerHTML = '';\n    this.filteredExperts.forEach(expert => {\n      let expertCard = createPhysician(expert);\n      this.main_grid.appendChild(expertCard);\n    });\n\n        // sports medicine grid\n        this.getSportsMedicineRow(this.filteredExperts);   \n        // spine back grid\n        this.getSpineRow(this.filteredExperts);    \n       \n        // the offering grid \n        if (this.secondFilteredExperts.length > 0) {\n            this.secondary_grid.innerHTML = '';\n            this.secondFilteredExperts.forEach(expert => {\n                let expertCard = createPhysician(expert);\n                this.secondary_grid.appendChild(expertCard);\n                this.secondary_grid.style.display = \"grid\";\n                // display offering text\n                this.secondary_text.style.display = \"block\";\n                // set offering text \n                this.secondary_text.innerHTML = `Physicians also offering  ${this.filter.specialty}`;\n            });\n        } else {\n            this.secondary_grid.innerHTML = '';\n            this.secondary_grid.style.display = \"none\";\n            // display none offering text\n            this.secondary_text.style.display = \"none\";\n        }\n      \n    \n  }\n}\nexport default SearchExperts;\n","import { expert_dummy } from \"../../data/dummy\";\nimport \"../scss/app.scss\"; // Importing SCSS file\nimport SearchExperts from \"../utilities/SearchExperts\";\nimport { fetchPhysicians } from \"../utilities/create-physician\";\nclass LocationGrid {\n  constructor() {\n    this.filterButtons = document.querySelectorAll(\".location-filter-button\");\n    this.gridItems = [...document.querySelectorAll(\".location-grid-item\")];\n    this.itemsToUse = [];\n    this.itemsToNotUse = [];\n    this.activeTab;\n    this.parentGrid = document.getElementById(\"main-grid\");\n    this.filterButtons.forEach(\n      (button) => (button.onclick = this.filterButtonHandler.bind(this))\n    );\n\n    window.addEventListener(\"resize\", this.handleResize.bind(this));\n  }\n\n\n  hideItems(items) {\n    items.forEach((item) => {\n      item.classList.remove(\"see_location\");\n      item.classList.add(\"hide_location\");\n    });\n  }\n\n  getComputedStyleValue(element, property) {\n    return parseInt(\n      window.getComputedStyle(element).getPropertyValue(property)\n    );\n  }\n\n  gridSizeAndColumnWidth(items) {\n    this.locationGrid = document.querySelector(\".location-grid\");\n    const gridWidth = this.locationGrid.offsetWidth;\n    const referenceItem = items[0];\n\n    let marginTop = this.getComputedStyleValue(referenceItem, \"margin-top\");\n    let marginBottom = this.getComputedStyleValue(\n      referenceItem,\n      \"margin-bottom\"\n    );\n    let marginY = marginTop > marginBottom ? marginTop : marginBottom;\n\n    let marginLeft = this.getComputedStyleValue(referenceItem, \"margin-left\");\n    let marginRight = this.getComputedStyleValue(referenceItem, \"margin-right\");\n    let marginX = marginLeft > marginRight ? marginLeft : marginRight;\n\n    let columnWidth = referenceItem.offsetWidth;\n    let columns = Math.floor(gridWidth / columnWidth);\n\n    let numRows = Math.ceil(items.length / columns);\n\n    let gridHeight = numRows * (referenceItem.offsetHeight + marginY);\n\n    return { columns, columnWidth, margin: marginY, gridHeight };\n  }\n\n  placeItemsInCorrectPosition(items, columns, columnWidth, margin, gridHeight) {\n    // randomize the order of the items\n    let random_items = items.sort(() => Math.random() - 0.5);\n\n    random_items.forEach((item, index) => {\n      let row = Math.floor(index / columns);\n      let col = index % columns;\n\n      let left = col * (columnWidth + margin);\n      let top = row * (item.offsetHeight + margin);\n\n      item.classList.remove(\"hide_location\");\n      item.classList.add(\"see_location\");\n\n      item.style.left = left + \"px\";\n      item.style.top = top + \"px\";\n    });\n\n    this.locationGrid = document.querySelector(\".location-grid\");\n    this.locationGrid.style.height = gridHeight + \"px\";\n    this.locationGrid.style.position = \"relative\";\n  }\n\n  initGrid() {\n    // filter item with main\n    this.initItems = this.gridItems.filter((item) =>\n      item.dataset.service.match(/main|surgery/)\n    );\n    this.hideItems(\n      this.gridItems.filter(\n        (item) => !item.dataset.service.match(/main|surgery/)\n      )\n    );\n\n    const { columns, columnWidth, margin, gridHeight } =\n      this.gridSizeAndColumnWidth(this.initItems);\n    this.placeItemsInCorrectPosition(\n      this.initItems,\n      columns,\n      columnWidth,\n      margin,\n      gridHeight\n    );\n  }\n\n  filterButtonHandler(e) {\n    const identifier = e.target.id;\n    this.activeTab && this.activeTab.classList.remove(\"filter_button_clicked\");\n\n    this.itemsToUse = this.gridItems.filter((item) =>\n      item.dataset.service.match(identifier)\n    );\n    this.itemsToNotUse = this.gridItems.filter(\n      (item) => !item.dataset.service.match(identifier)\n    );\n\n    this.hideItems(this.itemsToNotUse);\n\n    const { columns, columnWidth, margin, gridHeight } =\n      this.gridSizeAndColumnWidth(this.itemsToUse);\n    this.placeItemsInCorrectPosition(\n      this.itemsToUse,\n      columns,\n      columnWidth,\n      margin,\n      gridHeight\n    );\n    this.activeTab = e.target;\n    this.activeTab.classList.add(\"filter_button_clicked\");\n  }\n\n  handleResize() {\n    setTimeout(() => {\n      if (this.itemsToUse.length > 0) {\n        const { columns, columnWidth, margin, gridHeight } =\n          this.gridSizeAndColumnWidth(this.itemsToUse);\n        this.placeItemsInCorrectPosition(\n          this.itemsToUse,\n          columns,\n          columnWidth,\n          margin,\n          gridHeight\n        );\n       \n      }\n    }, 500);\n  }\n}\n\n// Instantiate the class\nconst locationGridInstance = new LocationGrid();\n\nlet export_grid_items = [...document.querySelectorAll(\".physician-card\")];\nlet converted_grid_items = export_grid_items.map((item) => {\n  const { location, specialty, title: name} = item.dataset;\n  return {\n    element: item,\n    location,\n    specialty,\n    name,\n  };\n});\n\nclass ExpertGrid {\n  constructor(grid_items) {\n    this.grid_items = grid_items || [];\n    this.filteredItems = [];\n    this.secondary_filter_items = [];\n    this.secondary_grid = document.getElementById(\"offering-grid\");\n    this.secondary_text = document.getElementById(\"offering-text\").querySelector('strong');\n\n   \n\n    this.sports_medicine_row = document.getElementById(\"sportsmedicine-row\");\n    this.spine_back_row = document.getElementById(\"spineneckback-row\");\n    this.all_experts_rows = document.getElementById(\"all-experts-row\");\n\n  this.sports_medicine_row.style.display = \"none\";\n    this.spine_back_row.style.display = \"none\";\n\n    this.filterSelects = [...document.querySelectorAll(\".expert-filter\")].slice(\n      0,\n      2\n    );\n\n    this.filterSearch = document.querySelector(\".expert-filter-search-box\");\n\n    this.parentGrid = document.getElementById(\"expert-grid-parent\");\n    this.location = \"\";\n    this.specialty = \"\";\n    this.name = \"\";\n    this.timer = null;\n    //  get specialty from url\n    const urlParams = new URLSearchParams(window.location.search);\n    const specialty = urlParams.get(\"specialty\");\n    this.initValue = specialty;\n    this.option_values_to_text_ids = {\n      all: false,\n      footankle: \"foot-ankle-x\",\n      generalorthopaedics: \"general-orthopeadics-x\",\n      handwrist: \"hand-wrist-x\",\n      hipknee: \"hip-x\",\n      oncology: \"oncology-x\",\n      pediatric: \"pediatric-x\",\n      shoulder: \"shoulder-x\",\n      spineneckback: \"spine-neck-back-x\",\n      sportsmedicine: \"sports-medicine-x\",\n      trauma: \"trauma-x\",\n    };\n\n    this.activePargraph = null;\n\n    this.events();\n    this.init();\n  }\n\n  convert_grid_item(grids) {\n    return [...grids].map((item) => {\n      const { location, specialty, name } = item.dataset;\n      return {\n        element: item,\n        location,\n        specialty,\n        name,\n      };\n    });\n  }\n\n  init() {\n    if (this.initValue) {\n      this.specialty = this.initValue;\n      this.filterGridItems();\n      this.filterSecondaryItems();\n      // id=\"specialty-dropdown\" change section to option that matches this.initValue\n      const specialtyDropdown = document.getElementById(\"specialty-dropdown\");\n      const specialtyOptions = [...specialtyDropdown.options];\n      const specialtyOption = specialtyOptions.find(\n        (option) => option.value === this.initValue\n      );\n      specialtyOption.selected = true;\n\n      // hide active paragraph if there is one\n      this.activePargraph &&\n        (this.activePargraph.style.display = \"none\") &&\n        (this.activePargraph = null);\n      this.option_values_to_text_ids[this.initValue]\n        ? (this.activePargraph = document.getElementById(\n            this.option_values_to_text_ids[this.initValue]\n          ))\n        : (this.activePargraph = null);\n\n      this.activePargraph && (this.activePargraph.style.display = \"block\");\n\n      this.dynamically_choose_correct_container_to_display(this.initValue);\n    }\n\n    // display none on all secondary filter items\n    this.secondary_grid.style.display = \"none\";\n    this.secondary_text.style.display = \"none\";\n  }\n\n  events() {\n    this.filterSelects.forEach(\n      (select) => (select.onchange = this.filterSelectHandler.bind(this))\n    );\n    this.filterSearch.onkeyup = this.filterSearchHandler.bind(this);\n\n    this.select_opt_group = document.getElementById(\"specialty-dropdown\");\n   }\n  filterSelectHandler(e) {\n    let element = e.target;\n    const filter_value = e.target.value;\n    let filter_key = e.target.dataset.filterGroup;\n    this[filter_key] = filter_value;\n\n    if (filter_key === \"specialty\") {\n\n\n      // hide active paragraph if there is one\n      this.activePargraph && (this.activePargraph.style.display = \"none\");\n      this.option_values_to_text_ids[filter_value]\n        ? (this.activePargraph = document.getElementById(\n            this.option_values_to_text_ids[filter_value]\n          ))\n        : (this.activePargraph = null);\n\n      this.activePargraph && (this.activePargraph.style.display = \"block\");\n\n      this.dynamically_choose_correct_container_to_display(filter_value);\n      this.dynamically_choose_which_secondary_filter_to_display(filter_value);\n    }\n\n\n    this.filterGridItems();\n    this.filterSecondaryItems();\n  //  scroll element into view\n\n  }\n\n\n\n  dynamically_choose_correct_container_to_display(filter_value) {\n    if (filter_value === \"sportsmedicine\") {\n      this.sports_medicine_row.style.display = \"flex\";\n      this.spine_back_row.style.display = \"none\";\n      this.all_experts_rows.style.display = \"none\";\n    } else if (filter_value === \"spineneckback\") {\n      this.sports_medicine_row.style.display = \"none\";\n      this.spine_back_row.style.display = \"flex\";\n      this.all_experts_rows.style.display = \"none\";\n    } else {\n      this.sports_medicine_row.style.display = \"none\";\n      this.spine_back_row.style.display = \"none\";\n      this.all_experts_rows.style.display = \"flex\";\n    }\n  }\n\n  dynamically_choose_which_secondary_filter_to_display(filter_value) {\n    const specialtyObject = {\n      all: '',\n      footankle: 'Physicians also offering Foot & Ankle Procedures',\n      generalorthopaedics: 'Physicians also offering General Orthopaedics Procedures',\n      handwrist: 'Physicians also offering Hand & Wrist Procedures',\n      hipknee: 'Physicians also offering Hip & Knee Replacement Procedures',\n      oncology: 'Physicians also offering Oncology Procedures',\n      pediatric: 'Physicians also offering Pediatric Procedures',\n      shoulder: 'Physicians also offering Shoulder & Elbow Procedures',\n      spineneckback: 'Physicians also offering Spine (Neck & Back) Procedures',\n      sportsmedicine: 'Physicians also offering Sports Medicine Procedures',\n      trauma: 'Physicians also offering Trauma Procedures'\n    };\n    \n    this.secondary_text.innerHTML = specialtyObject[filter_value];\n    \n  }\n  filterSearchHandler(e) {\n    // debounce\n    clearTimeout(this.timer);\n    this.timer = setTimeout(() => {\n      const search_value = e.target.value;\n      this.name = search_value;\n      this.filterGridItems();\n      this.filterSecondaryItems();\n      // loop through and remove duplicates based on name\n    }, 1000);\n  }\n// Utility function to check if an item matches the given criteria\nmatchesCriteria(item, isSecondaryFilter = false) {\n  const locationRegex = new RegExp(this.location, \"i\");\n  const specialtyRegex = new RegExp(this.specialty, \"i\");\n  const nameRegex = new RegExp(this.name, \"i\");\n\n  const { location, specialty, name } = item;\n  const locationMatch = this.location.toLowerCase() === \"all locations\" || location.match(locationRegex);\n  let  specialtyMatch;  \n    if(isSecondaryFilter) {\n      let secondarySpecailty =  item.element.dataset.secondarySpecialty || '';\n      if(!secondarySpecailty) {\n        specialtyMatch = false;\n      } else {\n        specialtyMatch  = this.specialty.toLowerCase() === \"all\" || secondarySpecailty.match(specialtyRegex);\n      }\n      \n    } else {\n    specialtyMatch  = this.specialty.toLowerCase() === \"all\" || specialty.match(specialtyRegex);\n\n    }\n\n  const nameMatch = this.name.toLowerCase() === \"\" || name.match(nameRegex);\n\n  return locationMatch && specialtyMatch && nameMatch;\n}\n\n// Primary filtering\nfilterGridItems() {\n  this.filteredItems = this.grid_items.filter((item) => {\n    const isMatched = this.matchesCriteria(item);\n    let parent = item.element.closest('.physician-card-container');\n    if (isMatched) {\n      // parent container physician-card-container \n \n      parent.classList.add(\"see_expert\");\n      parent.classList.remove(\"hide_expert\");\n    } else {\n      parent.classList.add(\"hide_expert\");\n      parent.classList.remove(\"see_expert\");\n    }\n\n    return isMatched;\n  });\n}\n\n// Secondary filtering\n  filterSecondaryItems() {\n  \n    // log filter options \n   \n \n  if( this.specialty == 'all' || this.specialty == \"\") {\n    this.secondary_grid.style.display = \"none\";\n    this.secondary_text.style.display = \"none\";\n  return;\n  }\n  this.secondary_filter_items = this.grid_items.reduce((filtered, item) => {\n    const isMatched = this.matchesCriteria(item, true);\n\n    if (isMatched) {\n      let clone = item.element.cloneNode(true);\n      clone.classList.add(\"see_expert\");\n      clone.classList.remove(\"hide_expert\");\n      // check of clone is already in filtered by checking ids\n      const alreadyInFiltered = filtered.find((item) => item.id === clone.id);\n      if (!alreadyInFiltered){\n      filtered.push(clone);\n      }\n    }\n\n    return filtered;\n  }, []);\n\n  this.secondary_grid.innerHTML = \"\";\n\n  \n  if(this.secondary_filter_items.length !== 0) {\n    this.secondary_grid.style.display = \"flex\";\n    this.secondary_text.style.display = \"block\";\n     this.secondary_filter_items.forEach((item) => {\n      this.secondary_grid.appendChild(item);\n      \n    });\n  } else {\n    this.secondary_grid.style.display = \"none\";\n    this.secondary_text.style.display = \"none\";\n  }   \n \n\n }\n\n   \n\n  updateGrid() {\n  \n    this.parentGrid.innerHTML = \"\";\n\n    console.log(this.parentGrid, 'update');\n    if (this.filteredItems.length !== 0) {\n      this.filteredItems.forEach((item) => {\n        this.parentGrid.appendChild(item.element);\n      });\n    } else {\n      //    no results\n\n      const noResults = document.createElement(\"div\");\n      noResults.classList.add(\"no-results\");\n      noResults.innerHTML = \"<h2>No Results Found</h2>\";\n      this.parentGrid.appendChild(noResults);\n    }\n\n   \n  }\n  \n}\n\n// if (export_grid_items.length > 0) {\n//   const expertGridInstance = new ExpertGrid(converted_grid_items);\n// }\n\n\nnew SearchExperts('#main-grid');\n \n\n\n"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","physicianPopupCard","expert","popup_container","document","createElement","classList","add","id","title","name","job_title","image_url","thumbnail","console","log","specialty","reduce","acc","curr","sportsmedicine","spineneckback","handwrist","footankle","jointreplacement","pediatric","shoulder","hipknee","trauma","oncology","generalorthopaedics","jointreplacementankle","jointreplacementknee","jointreplacementhip","charAt","toUpperCase","slice","locations","location","split","replace","affilation_image","innerHTML","permalink","body","appendChild","getElementById","onclick","remove","style","overflow","height","createPhysician","data","physicianCard","dataset","physican_data","JSON","stringify","affiliation_choice","phone","site_url","querySelector","addEventListener","window","href","querySelectorAll","forEach","menuItem","e","currentTarget","value","contains","constructor","main_grid","this","secondary_grid","secondary_text","sports_medicine_row","spine_back_row","filterSelects","filterSearch","option_values_to_text_ids","all","activePargraph","filter","display","init","events","setup_experts","getSportsMedicineRow","getSpineRow","error","Error","experts","async","headers","Headers","append","wp_rest_nonce","response","fetch","ajax_url","method","json","success","message","Array","isArray","sort","a","b","aLastName","aFirstName","reverse","bLastName","bFirstName","localeCompare","fetchPhysicians","filteredExperts","expertCard","sports_medicine_data","isMedicine","includes","isMedicineSecondary","secondary_specialty","isSurgery","surgery","toLowerCase","sports_medicine_surgery","push","sports_medicine_non_surgery","sports_medicine_also_offering","sports_medicine_surgeon_row","non_surgeon_medicine_row","spine_back_data","spine_back_surgery","spine_back_non_surgery","spine_back_also_offering","spine_back_surgeon_row","spine_back_non_surgeon_row","select","active_pargraph_selector","target","correct_row","key","filterGroup","filterExperts","secondFilteredExperts","isFound","found","filterValue","trim","expertValue","regex","RegExp","match","locationFound","length","filterButtons","gridItems","itemsToUse","itemsToNotUse","activeTab","parentGrid","button","filterButtonHandler","bind","handleResize","hideItems","items","item","getComputedStyleValue","element","property","parseInt","getComputedStyle","getPropertyValue","gridSizeAndColumnWidth","locationGrid","gridWidth","offsetWidth","referenceItem","marginTop","marginBottom","marginY","columnWidth","columns","Math","floor","margin","gridHeight","ceil","offsetHeight","placeItemsInCorrectPosition","random","index","row","left","top","position","initGrid","initItems","service","identifier","setTimeout","map","SearchExperts"],"sourceRoot":""}